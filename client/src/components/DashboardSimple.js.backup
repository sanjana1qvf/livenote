import React, { useState, useEffect, useCallback } from 'react';
import { Link } from 'react-router-dom';
import { useAuth } from '../contexts/AuthContextSimple';
import { Calendar, Clock, FileText, Trash2, Plus, Edit3, Check, X } from 'lucide-react';

const Dashboard = () => {
  const [lectures, setLectures] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [editingId, setEditingId] = useState(null);
  const [editTitle, setEditTitle] = useState('');
  const { getAuthHeaders, isAuthenticated, user } = useAuth();

  const fetchLectures = useCallback(async () => {
    // Only fetch if user is authenticated and we have a valid token
    if (!user || !isAuthenticated()) {
      setLoading(false);
      setError('Please log in to view your lectures');
      return;
    }

    try {
      const response = await fetch('http://localhost:5000/api/lectures', {
        headers: {
          'Content-Type': 'application/json',
          ...getAuthHeaders()
        }
      });
      
      if (response.ok) {
        const data = await response.json();
        setLectures(data);
        setError(null);
      } else if (response.status === 401) {
        // User is not authenticated, redirect to login
        setError('Please log in to view your lectures');
      } else {
        setError('Failed to fetch lectures');
      }
    } catch (err) {
      setError('Failed to fetch lectures');
      console.error('Error fetching lectures:', err);
    } finally {
      setLoading(false);
    }
  }, [getAuthHeaders, isAuthenticated, user]);

  useEffect(() => {
    // Only fetch lectures if user is authenticated
    if (user && isAuthenticated()) {
      fetchLectures();
    } else {
      setLoading(false);
    }
  }, [fetchLectures, user, isAuthenticated]);

  const deleteLecture = async (id) => {
    if (!window.confirm('Are you sure you want to delete this lecture?')) {
      return;
    }

    try {
      const response = await fetch(`http://localhost:5000/api/lectures/${id}`, {
        method: 'DELETE',
        headers: {
          'Content-Type': 'application/json',
          ...getAuthHeaders()
        }
      });
      
      if (response.ok) {
        setLectures(lectures.filter(lecture => lecture.id !== id));
      } else {
        alert('Failed to delete lecture');
      }
    } catch (err) {
      console.error('Error deleting lecture:', err);
      alert('Failed to delete lecture');
    }
  };

  const startEditing = (lecture) => {
    setEditingId(lecture.id);
    setEditTitle(lecture.title);
  };

  const cancelEditing = () => {
    setEditingId(null);
    setEditTitle('');
  };

  const saveEdit = async (id) => {
    try {
      const response = await fetch(`http://localhost:5000/api/lectures/${id}`, {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json',
          ...getAuthHeaders()
        },
        body: JSON.stringify({ title: editTitle })
      });
      
      if (response.ok) {
        const updatedLecture = await response.json();
        setLectures(lectures.map(lecture => 
          lecture.id === id ? updatedLecture : lecture
        ));
        setEditingId(null);
        setEditTitle('');
      } else {
        alert('Failed to update lecture');
      }
    } catch (err) {
      console.error('Error updating lecture:', err);
      alert('Failed to update lecture');
    }
  };

  const formatDate = (dateString) => {
    const date = new Date(dateString);
    return date.toLocaleDateString('en-US', {
      year: 'numeric',
      month: 'short',
      day: 'numeric',
      hour: '2-digit',
      minute: '2-digit'
    });
  };

  if (loading) {
    return (
      <div className="flex items-center justify-center h-64">
        <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-primary-600"></div>
      </div>
    );
  }

  if (error) {
    return (
      <div className="text-center py-12">
        <div className="text-red-600 mb-4">{error}</div>
        <button
          onClick={fetchLectures}
          className="px-4 py-2 bg-primary-600 text-white rounded-md hover:bg-primary-700"
        >
          Try Again
        </button>
      </div>
    );
  }

  return (
    <div className="space-y-6">
      {/* Header */}
      <div className="flex items-center justify-between">
        <div>
          <h1 className="text-3xl font-bold text-gray-900">My Lectures</h1>
          <p className="text-gray-600 mt-1">
            {lectures.length} lecture{lectures.length !== 1 ? 's' : ''} recorded
          </p>
        </div>
        <Link
          to="/record"
          className="inline-flex items-center px-4 py-2 bg-primary-600 text-white rounded-md hover:bg-primary-700 transition-colors"
        >
          <Plus className="h-5 w-5 mr-2" />
          Record New Lecture
        </Link>
      </div>

      {/* Lectures List */}
      {lectures.length === 0 ? (
        <div className="text-center py-12">
          <FileText className="h-16 w-16 text-gray-400 mx-auto mb-4" />
          <h3 className="text-lg font-medium text-gray-900 mb-2">No lectures yet</h3>
          <p className="text-gray-600 mb-6">
            Start by recording your first lecture to get AI-powered notes and summaries.
          </p>
          <Link
            to="/record"
            className="inline-flex items-center px-4 py-2 bg-primary-600 text-white rounded-md hover:bg-primary-700 transition-colors"
          >
            <Plus className="h-5 w-5 mr-2" />
            Record Your First Lecture
          </Link>
        </div>
      ) : (
        <div className="grid gap-6 md:grid-cols-2 lg:grid-cols-3">
          {lectures.map((lecture) => (
            <div key={lecture.id} className="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
              <div className="flex items-start justify-between mb-4">
                <div className="flex-1">
                  {editingId === lecture.id ? (
                    <div className="flex items-center space-x-2">
                      <input
                        type="text"
                        value={editTitle}
                        onChange={(e) => setEditTitle(e.target.value)}
                        className="flex-1 px-3 py-1 border border-gray-300 rounded-md text-sm focus:outline-none focus:ring-2 focus:ring-primary-500"
                        autoFocus
                      />
                      <button
                        onClick={() => saveEdit(lecture.id)}
                        className="p-1 text-green-600 hover:text-green-700"
                      >
                        <Check className="h-4 w-4" />
                      </button>
                      <button
                        onClick={cancelEditing}
                        className="p-1 text-red-600 hover:text-red-700"
                      >
                        <X className="h-4 w-4" />
                      </button>
                    </div>
                  ) : (
                    <h3 className="text-lg font-semibold text-gray-900 mb-2">
                      {lecture.title}
                    </h3>
                  )}
                </div>
                <div className="flex items-center space-x-2 ml-4">
                  <button
                    onClick={() => startEditing(lecture)}
                    className="p-1 text-gray-400 hover:text-gray-600"
                  >
                    <Edit3 className="h-4 w-4" />
                  </button>
                  <button
                    onClick={() => deleteLecture(lecture.id)}
                    className="p-1 text-red-400 hover:text-red-600"
                  >
                    <Trash2 className="h-4 w-4" />
                  </button>
                </div>
              </div>

              <div className="space-y-2 mb-4">
                <div className="flex items-center text-sm text-gray-500">
                  <Calendar className="h-4 w-4 mr-2" />
                  {formatDate(lecture.created_at)}
                </div>
                <div className="flex items-center text-sm text-gray-500">
                  <Clock className="h-4 w-4 mr-2" />
                  {lecture.transcription ? `${lecture.transcription.length} characters` : 'Processing...'}
                </div>
              </div>

              {lecture.summary && (
                <div className="mb-4">
                  <h4 className="text-sm font-medium text-gray-700 mb-2">Summary</h4>
                  <p className="text-sm text-gray-600 line-clamp-3">
                    {lecture.summary}
                  </p>
                </div>
              )}

              <Link
                to={`/lecture/${lecture.id}`}
                className="inline-flex items-center text-sm font-medium text-primary-600 hover:text-primary-700"
              >
                View Details
                <svg className="ml-1 h-4 w-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 5l7 7-7 7" />
                </svg>
              </Link>
            </div>
          ))}
        </div>
      )}
    </div>
  );
};

export default Dashboard;
